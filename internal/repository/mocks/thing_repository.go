// Code generated by MockGen. DO NOT EDIT.
// Source: thing_repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/knappjf/quickquestion/internal/models"
	reflect "reflect"
)

// MockThingRepository is a mock of ThingRepository interface
type MockThingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThingRepositoryMockRecorder
}

// MockThingRepositoryMockRecorder is the mock recorder for MockThingRepository
type MockThingRepositoryMockRecorder struct {
	mock *MockThingRepository
}

// NewMockThingRepository creates a new mock instance
func NewMockThingRepository(ctrl *gomock.Controller) *MockThingRepository {
	mock := &MockThingRepository{ctrl: ctrl}
	mock.recorder = &MockThingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThingRepository) EXPECT() *MockThingRepositoryMockRecorder {
	return m.recorder
}

// GetThing mocks base method
func (m *MockThingRepository) GetThing(arg0 int) (models.Thing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThing", arg0)
	ret0, _ := ret[0].(models.Thing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThing indicates an expected call of GetThing
func (mr *MockThingRepositoryMockRecorder) GetThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThing", reflect.TypeOf((*MockThingRepository)(nil).GetThing), arg0)
}

// CreateThing mocks base method
func (m *MockThingRepository) CreateThing(arg0 models.Thing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateThing", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateThing indicates an expected call of CreateThing
func (mr *MockThingRepositoryMockRecorder) CreateThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateThing", reflect.TypeOf((*MockThingRepository)(nil).CreateThing), arg0)
}

// DeleteThing mocks base method
func (m *MockThingRepository) DeleteThing(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThing", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThing indicates an expected call of DeleteThing
func (mr *MockThingRepositoryMockRecorder) DeleteThing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThing", reflect.TypeOf((*MockThingRepository)(nil).DeleteThing), arg0)
}

// UpdateThing mocks base method
func (m *MockThingRepository) UpdateThing(arg0 int, arg1 models.Thing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateThing", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateThing indicates an expected call of UpdateThing
func (mr *MockThingRepositoryMockRecorder) UpdateThing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateThing", reflect.TypeOf((*MockThingRepository)(nil).UpdateThing), arg0, arg1)
}
